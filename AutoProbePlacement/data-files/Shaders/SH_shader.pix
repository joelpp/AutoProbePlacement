#version 430
uniform float intensity;
//in vec3 faceColor;

out vec4 result;
in vec3 vColor;
in vec3 tNormal;
in vec2 texCoord;


layout (std430, binding=0) buffer MyStruct
{ 
  //int anInt;
  //float aFloat;
  vec4 aFloat4;
} mySSBO;

struct SProbe
{
	float coefficients[27];
};

layout (std430, binding=1) buffer SProbeList
{
	SProbe probes[4851];
} probeList;

uniform vec3 coeff0;

uniform float r;
uniform int k;
uniform float multiplier;

uniform sampler2D uSampler;

float phongCoeffs(int l, float r){
    float pi = 3.14159;
    if (l == 0){
        return pi;
    }
    else if (l == 1){
        return pi * (1.0+r)/(2.0+r);
    }
    else if (l == 2){
        return pi * r / (3.0+r);
    }
    else if (l == 3){
        return pi * (r-1.0)*(r+1.0) / (8.0 + 6.0*r + r*r);
    }
    else if (l == 4){
        return (r-2.0)*r / ((r+3.0)*(r+5.0));
    }
    else if (l == 5){
        return (r-3) * (r-1) * (r+1) / ((2+r)*(4+r)*(6+r));
    }
    else if (l == 6){
        return (r-4) * (r-2) * (r) / ((3+r)*(5+r)*(7+r));
    }
    else if (l == 7){
        return (r-5) * (r-3) * (r-1) * (r+1) / ((2+r)*(4+r)*(6+r)*(8+r));
    }
    else if (l == 8){
        return (r-6) * (r-4) * (r-2) * r / ((3+r)*(5+r)*(7+r)*(9+r));
    }
    else if (l == 9){
        return (r-7) * (r-5) * (r-3) * (r-1) * (r+1) / ((2+r)*(4+r)*(6+r)*(8+r)*(10+r));
    }
}
//TODO

/**
 *  elif (l == 5):
        return (r-3) * (r-1) * (r+1) / ((2+r)*(4+r)*(6+r));
    elif (l == 6):
        return (r-4) * (r-2) * (r) / ((3+r)*(5+r)*(7+r));
    elif (l == 7):
        return (r-5) * (r-3) * (r-1) * (r+1) / ((2+r)*(4+r)*(6+r)*(8+r));
    elif (l == 8):
        return (r-6) * (r-4) * (r-2) * r / ((3+r)*(5+r)*(7+r)*(9+r));
    elif (l == 9):
        return (r-7) * (r-5) * (r-3) * (r-1) * (r+1) / ((2+r)*(4+r)*(6+r)*(8+r)*(10+r));
 */

void main() {
    float pi = 3.14159;
    vec3 normal = normalize(tNormal);

    //float x = normal.y;
    //float y = normal.z;
    //float z = normal.x;

    float x = -normal.x;
    float y = normal.y;
    float z = normal.z;

    float u = (1-(atan(z,x) / (2*pi)));
    float v = (acos(y) / pi);



    vec4 value = texture(uSampler, vec2(u,v))*2-vec4(1.0);
    if (k == 0) value.x = 0.2820947;

    vec3 E = vec3(0.0);
    if (coeff0.x != 9999)
        E += coeff0 * value.x * phongCoeffs(k, r);
        // E += value.xyz;
 
    result = vec4(E*multiplier, 1.0);
	
	int probeIndex = 2508;
	int coeffSet = 0;
	vec3 outAlbedo = vec3(probeList.probes[probeIndex].coefficients[coeffSet * 3 + 0], 
						  probeList.probes[probeIndex].coefficients[coeffSet * 3 + 1], 
						  probeList.probes[probeIndex].coefficients[coeffSet * 3 + 2]);
						  
	//result = vec4(outAlbedo, 1.0);
	
}