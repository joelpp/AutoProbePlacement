#version 330
uniform float intensity;
//in vec3 faceColor;

out vec4 result;
in vec3 vColor;
in vec3 normal;
in vec2 texCoord;

in vec3 outCoeff0;
in vec3 outCoeff1;
in vec3 outCoeff2;
in vec3 outCoeff3;
in vec3 outCoeff4;
in vec3 outCoeff5;
in vec3 outCoeff6;
in vec3 outCoeff7;
in vec3 outCoeff8;

in float outSHValue0;
in float outSHValue1;
in float outSHValue2;
in float outSHValue3;
in float outSHValue4;
in float outSHValue5;
in float outSHValue6;
in float outSHValue7;
in float outSHValue8;

uniform float r;

uniform sampler2D uSampler;

float phongCoeffs(int l, float r){
    float pi = 3.14159;
    if (l == 0){
        return pi;
    }
    else if (l == 1){
        return pi * (1.0+r)/(2.0+r);
    }
    else if (l == 2){
        return pi * r / (3.0+r);
    }
    else if (l == 3){
        return pi * (r-1.0)*(r+1.0) / (8.0 + 6.0*r + r*r);
    }
    else if (l == 4){
        return (r-2.0)*r / ((r+3.0)*(r+5.0));
    }
}


void main() {
    float pi = 3.14159;
    //float r = 1.0;


	float x = normal.x;
    float y = normal.y;
    float z = normal.z;

    vec3 E = outCoeff0 * outSHValue0 * phongCoeffs(0, r);
    E += outCoeff1 * outSHValue1 * phongCoeffs(1, r);
    E += outCoeff2 * outSHValue2 * phongCoeffs(1, r);
    E += outCoeff3 * outSHValue3 * phongCoeffs(1, r);
    E += outCoeff4 * outSHValue4 * phongCoeffs(2, r);
    E += outCoeff5 * outSHValue5 * phongCoeffs(2, r);
    E += outCoeff6 * outSHValue6 * phongCoeffs(2, r);
    E += outCoeff7 * outSHValue7 * phongCoeffs(2, r);
    E += outCoeff8 * outSHValue8 * phongCoeffs(2, r);
    
    //vec3 E = 0.4288 * outCoeff8 * (x*x - y*y) + 
                 0.247 * 3.0 * outCoeff6 * z*z +
                 2.7834 * outCoeff0 -
                 0.247 * outCoeff6 + 
                 2.6943 * ( outCoeff4*x*y - outCoeff7*x*z - outCoeff5*y*z) +
                 3.21429 * (-outCoeff3 * x - outCoeff1*y + outCoeff2*z);
    
    //result = vec4( 1 - (outSHValue8+1)/2,(outSHValue8+1)/2,0, 1.0);
    result = vec4(E*pi, 1.0);

    //if (any(lessThan(E, vec3(0.0)))){
	//    result = vec4(1.0,0.0,0.0, 1.0);
    //}
    //else{
    //	result = vec4(0.0,1.0,0.0,1.0);
   	//}

    //result = vec4(normal, 1.0);


}
