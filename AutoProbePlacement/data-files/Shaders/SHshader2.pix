#version 430

#include "ProbeFunctions.pix"

#define EPSILON 0.0001
#define FRAGMENT_SHADING 1

uniform float intensity;

out vec4 result;
in vec3 vColor;
in vec3 tNormal;
in vec2 texCoord;
in vec3 wsPos;
//in vec3 translationVector;

uniform vec3 albedo;

uniform float r;
uniform int k;
uniform float multiplier;



void main() 
{
#if FRAGMENT_SHADING
    float pi = 3.14159;
    vec3 normal = normalize(tNormal);

    float u = ( 1 - ( atan(normal.z, normal.x) / (2 * pi) ) );
    float v = ( acos(normal.y) / pi );

	ProbeInterpolationRecord iRec = findInterpolatingProbes(wsPos, normal, probeStructure.step);
	vec3 finalValue;

	vec3 translationVector = -(wsPos - getProbePosition(int(iRec.probeIndices[0])));
    // translationVector.x *= -1;

	finalValue = fullSHInterpolation(iRec, normal
#if USE_SH_GRADIENTS
		, translationVector
#endif
		);

	//finalValue = vec3(iRec.weights[0], iRec.weights[0], iRec.weights[0]);
	//finalValue = wsPos;
	result = vec4(finalValue * multiplier / 3.141592654/** albedo*/, 1.0);
#else
	result = vec4(vColor * multiplier, 1.0);
#endif
	//
	//if (nearBorder(interpolatingWeights, normal))
	//{

	//	// result = vec4(1.0f);
	//}

	return;
}

