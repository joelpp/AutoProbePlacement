#version 430

#define BUFFER_SIZE DISPATCH_SIZE * DISPATCH_SIZE
#define PI 3.141592654

#include "SH.pix";

layout(local_size_x = DISPATCH_SIZE, local_size_y = DISPATCH_SIZE) in;
layout(binding = 0) uniform samplerCube img_output;
layout(std430, binding=1) buffer memory_buffer
{
	vec4 data[BUFFER_SIZE * 9];
	vec4 ProbeCoeffs[9];
} memBuffer;

float srgbToLinear(float srgb)
{
	if (srgb < 0.04045)
	{
		return srgb / 12.92;
	}
	else
	{
		return pow( (srgb + 0.055) / 1.055, 2.4);
	}
}
vec3 srgbToLinear(vec3 srgb)
{
	return vec3(srgbToLinear(srgb.x),
				srgbToLinear(srgb.y),
				srgbToLinear(srgb.z));
}

vec4 srgbToLinear(vec4 srgb)
{
	return vec4(srgbToLinear(srgb.x),
				srgbToLinear(srgb.y),
				srgbToLinear(srgb.z),
				srgbToLinear(srgb.w));
}

vec3 HemiSphereDirection(float r1, float r2)
{

	float phi = 2 * PI * r1;
	float theta = acos(r2);
	float r = sqrt(1 - pow(r2, 2));

	float x = cos(phi) * r;
	float y = sin(phi) * r;
	float z = r2;


	return vec3(x,y,z);
}
vec3 SphereDirection(float r1, float r2)
{

	float phi = 2 * PI * r1;
	float theta = acos(1 - 2 * r2);
	float r = sqrt(r2 * (1 - pow(r2, 2)));

	float x = cos(phi) * r;
	float y = sin(phi) * r;
	float z = 1 - 2 * r2;


	return normalize(vec3(x,y,z));
}


void main() {
	// base pixel colour for image
	vec4 pixel = vec4(1.0f, gl_GlobalInvocationID.x / 256.f, gl_GlobalInvocationID.y / 256.f, 0.0);
	// get index in global work group i.e x,y position
	ivec3 pixel_coords = ivec3(gl_GlobalInvocationID.xy, 1.0f);

	// uint index = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * 16;
	uint index = gl_LocalInvocationIndex;

	vec3 dir  = SphereDirection( float(gl_GlobalInvocationID.x) / float(DISPATCH_SIZE), float(gl_GlobalInvocationID.y) / float(DISPATCH_SIZE) ); 
	vec4 texelValue = texture(img_output, dir);

	// texelValue.x = dir.x > 0 ? 1 : 0;
	// texelValue.y = dir.y > 0 ? 1 : 0;
	// texelValue.z = dir.z > 0 ? 1 : 0;



	float shInDir[9];

	for (int k = 0; k < 9; ++k)
	{
		shInDir[k] = SHFunctionValue(k, dir);
		vec4 shCoeffs = shInDir[k] * texelValue;
		// memBuffer.data[gl_LocalInvocationIndex * 9 + k] = vec4(index, float(gl_GlobalInvocationID.x) / 16.f, float(gl_GlobalInvocationID.y) / 16.f , dir.z);
		// memBuffer.data[gl_LocalInvocationIndex * 9 + k] = vec4(index, dir.x, dir.y, dir.z);
		memBuffer.data[gl_LocalInvocationIndex * 9 + k] = shCoeffs;
		// atomicAdd(memBuffer.ProbeCoeffs[k] ,vec4(1,2,3,4));
	}
	memoryBarrier();
	// memBuffer.data[index] = vec4(index, 1,2,3);
	// if (gl_LocalInvocationIndex == 0)
	// {
	// 	for (int k = 0; k < 9; ++k)
	// 	{
	// 		vec4 accum = vec4(0, 0, 0, 0);
	// 		for (int sampleID = 0; sampleID < 256; ++sampleID)
	// 		{
	// 			accum += memBuffer.data[k + sampleID * 9];
	// 		}
	// 		memBuffer.data[k] = accum / float(256);
	// 	}
	// }
	// memBuffer.data[gl_LocalInvocationIndex] = vec4(index, dir.x, dir.y, dir.z);

	// vec3 contribution = texelValue.xyz * 
	// output to a specific pixel in the image
	// if ((pixel_coords.x % 2 == 0) || (pixel_coords.y % 2 == 0))
		// imageStore(img_output, pixel_coords, pixel);
}