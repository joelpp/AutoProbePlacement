		ray.mint = Epsilon;

		Spectrum throughput(1.0f);
		Float eta = 1.0f;

		const BSDF *bsdf = its.getBSDF(ray);

		/* ==================================================================== */
		/*                            BSDF sampling                             */
		/* ==================================================================== */

		/* Sample BSDF * cos(theta) */
		Float bsdfPdf;
		BSDFSamplingRecord bRec(its, rRec.sampler, ERadiance);
		Spectrum bsdfWeight = bsdf->sample(bRec, bsdfPdf, rRec.nextSample2D());

		if (bsdfWeight.isZero())
			return Li;

		/* Prevent light leaks due to the use of shading normals */
		const Vector wo = its.toWorld(bRec.wo);
		Log(EInfo, "wo: %f, %f, %f", wo.x, wo.y, wo.z);

		Float woDotGeoN = dot(its.geoFrame.n, wo);
		if (m_strictNormals && woDotGeoN * Frame::cosTheta(bRec.wo) <= 0)
			return Li;

		bool hitEmitter = false;
		Spectrum value;

		/* Trace a ray in this direction */
		ray = Ray(its.p, wo, ray.time);
		if (scene->rayIntersect(ray, its)) {

		}
		else {
			/* Intersected nothing  */
			Log(EInfo, "early exit");
			return Li;
		}

		if (its.isEmitter()){
			Log(EInfo, "hit emitter, early exit");
			return Li;
		}

		Log(EInfo, "intersection2: %f, %f, %f", its.p.x, its.p.y, its.p.z);

		/* Keep track of the throughput and relative
		refractive index along the path */
		//throughput *= bsdfWeight;
		const BSDF *bsdf2 = its.getBSDF(ray);

		/* ==================================================================== */
		/*                     Direct illumination sampling                     */
		/* ==================================================================== */

		/* Estimate the direct illumination if this is requested */
		DirectSamplingRecord dRec(its);
		bool backgroundPlate = rRec.depth == 1 && its.shape->getName().find("background") != std::string::npos;

		if (rRec.type & RadianceQueryRecord::EDirectSurfaceRadiance &&
			(bsdf2->getType() & BSDF::ESmooth)) {
			Spectrum value = scene->sampleEmitterDirect(dRec, rRec.nextSample2D());

			if (!value.isZero()) {
				const Emitter *emitter = static_cast<const Emitter *>(dRec.object);

				/* Allocate a record for querying the BSDF */
				BSDFSamplingRecord bRec(its, its.toLocal(dRec.d), ERadiance);

				/* Evaluate BSDF * cos(theta) */
				const Spectrum bsdfVal = bsdf2->eval(bRec);

				/* Prevent light leaks due to the use of shading normals */
				if (!bsdfVal.isZero() && (!m_strictNormals
					|| dot(its.geoFrame.n, dRec.d) * Frame::cosTheta(bRec.wo) > 0)) {

					/* Calculate prob. of having generated that direction
					using BSDF sampling */
					Float bsdfPdf = (emitter->isOnSurface() && dRec.measure == ESolidAngle)
						? bsdf2->pdf(bRec) : 0;

					/* Weight using the power heuristic */
					Float weight = miWeight(dRec.pdf, bsdfPdf);

					Li += throughput * value * bsdfVal * weight;
					
				}
				else{
					Log(EInfo, "didnt get into third if");
				}
			}
			else{
				Log(EInfo, "didnt get into second if (emitter sample value is zero)");
			}
		}
		else{
			Log(EInfo, "didnt get into first if");
		}
		
		//if (backgroundPlate) {
		//	if (dot(dRec.refN, dRec.d) < 0) {
		//		Li += Spectrum(1.0f);
		//		rRec.alpha = 0.0f;
		//	}
		//	return Li;
		//}
		//Log(EInfo, "made it to the end of the loLi function of the integrator");

		Log(EInfo, "Final spectrum: %s", Li.toString().c_str());